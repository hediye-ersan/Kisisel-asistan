package com.example.Kisisel_Asistan.Services;

import com.example.Kisisel_Asistan.Entity.Habit;
import com.example.Kisisel_Asistan.Entity.Task;
import com.example.Kisisel_Asistan.Entity.TaskStatus;
import com.example.Kisisel_Asistan.Entity.User;
import com.example.Kisisel_Asistan.Repository.HabitRepository;
import com.example.Kisisel_Asistan.Repository.TaskRepository;
import com.example.Kisisel_Asistan.Repository.UserRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.time.LocalDate;
import java.util.List;

@Service
@RequiredArgsConstructor
public class AiRecommendationService {

    private final UserRepository userRepository;
    private final TaskRepository taskRepository;
    private final HabitRepository habitRepository;

    public String generateDailyRecommendation(Long userId) {
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new RuntimeException("Bu id'ye ait kullanÄ±cÄ± bulunamadÄ±: " + userId));

        // GÃ¶revleri kontrol et
        List<Task> todayTasks = taskRepository.findByUser(user).stream()
                .filter(task -> task.getDueDate() != null &&
                        task.getDueDate().isEqual(LocalDate.now()))
                .toList();

        long doneCount = todayTasks.stream()
                .filter(task -> task.getStatus() == TaskStatus.DONE)
                .count();

        String taskMessage = switch ((int) doneCount) {
        case 0 -> todayTasks.isEmpty()
            ? "BugÃ¼n iÃ§in henÃ¼z gÃ¶rev planlamadÄ±nÄ±z."
            : todayTasks.stream().anyMatch(task -> task.getStatus() == TaskStatus.IN_PROGRESS)
                ? "GÃ¶revlerin Ã¼zerinde Ã§alÄ±ÅŸÄ±yorsun ama henÃ¼z tamamlamadÄ±ÄŸÄ±n gÃ¶revler var."
                : "GÃ¶revlerin hazÄ±r ama henÃ¼z baÅŸlamamÄ±ÅŸsÄ±n.";
         default -> doneCount < todayTasks.size()
            ? "Harika baÅŸladÄ±n! GÃ¶revlerinin bir kÄ±smÄ±nÄ± tamamladÄ±n."
            : "BugÃ¼nkÃ¼ tÃ¼m gÃ¶revleri tamamladÄ±n. SÃ¼persin!";
};

        // AlÄ±ÅŸkanlÄ±klarÄ± kontrol et
        List<Habit> habits = habitRepository.findByUser(user);
        long activeStreaks = habits.stream().filter(h -> h.getStreakCount() >= 3).count();
        long ignoredHabits = habits.stream().filter(h -> h.getStreakCount() == 0).count();

        String habitMessage;
        if (habits.isEmpty()) {
            habitMessage = "HenÃ¼z hiÃ§ alÄ±ÅŸkanlÄ±k eklemedin. Bir tane oluÅŸturmak ister misin?";
        } else if (activeStreaks > 0) {
            habitMessage = "AlÄ±ÅŸkanlÄ±klarÄ±nÄ± baÅŸarÄ±yla sÃ¼rdÃ¼rÃ¼yor gibisin. BÃ¶yle devam et! ğŸ”¥";
        } else if (ignoredHabits == habits.size()) {
            habitMessage = "AlÄ±ÅŸkanlÄ±klarÄ±nÄ± uzun sÃ¼redir takip etmiyorsun. Geri dÃ¶nmek iÃ§in gÃ¼zel bir gÃ¼n.";
        } else {
            habitMessage = "BazÄ± alÄ±ÅŸkanlÄ±klarÄ±n iÃ§in baÅŸarÄ± grafiÄŸin dÃ¼ÅŸmÃ¼ÅŸ. BugÃ¼n biraz odaklanmayÄ± deneyebilirsin.";
        }

        return taskMessage + " " + habitMessage;
    }
}

